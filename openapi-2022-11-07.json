{
  "openapi": "3.0.3",
  "info": {
    "description": "---\nsidebar_position: 1\nsidebar_label: Overview\nslug: /\n---\n\n# Introduction\n\nThe Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.\n\nThe API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.\n\nThis API reference provides details for each operation available in the API.\n\nWhen you install a local copy of Vault, you can try each operation using **Send API request**.\n\nAn OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API.\n",
    "contact": {
      "name": "Us",
      "url": "https://piiano.com/contact-us/"
    },
    "license": {
      "name": "MPL 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0/"
    },
    "title": "Piiano Vault REST API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8123"
    }
  ],
  "tags": [
    {
      "description": "This resource enables you to create, retrieve, and delete collections.",
      "name": "Collections"
    },
    {
      "description": "The Property types and transformations endpoints allow you to list available types and transformations for properties.",
      "name": "Data types and transformations"
    },
    {
      "description": "The object endpoints allow you to add, retrieve and update objects.",
      "name": "Objects"
    },
    {
      "description": "The token endpoints allow you to tokenize, detokenize, update and delete tokens.",
      "name": "Tokens"
    },
    {
      "description": "The IAM (identity and access management) endpoints allow you to set and retrieve IAM configuration, and to regenerate user API keys.",
      "name": "IAM"
    },
    {
      "description": "The config vars endpoints allow you to set and retrieve dynamic configuration variables.",
      "name": "Config Vars"
    },
    {
      "description": "The system endpoint allow you to retrieve system components status and Vault version.",
      "name": "System"
    }
  ],
  "paths": {
    "/api/pvlt/1.0/ctl/collections": {
      "get": {
        "operationId": "get-all-collections",
        "summary": "List collections",
        "description": "Lists all collections.\n\nThe collections can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.\n\nThe PVSchema format for multiple collections is the PVSchema for each collection string concatenated with a newline.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
          },
          {
            "description": "Options for the operation. Options include:\n- `show_builtins` – show built-in properties in the response.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "enum": [
                  "show_builtins"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/models.Collection"
                  }
                }
              },
              "application/pvschema": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/models.Collection.pvschema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "Reserved for future use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "error_code": "PV1004",
                  "message": "The collection is not found.",
                  "context": {}
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 1
      },
      "post": {
        "operationId": "add-collection",
        "summary": "Add collection",
        "description": "Adds a collection.\n\nThe collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.\n\nInvalid optional `properties` attributes in a JSON request are ignored.\n\nThe role performing this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
          },
          {
            "description": "Options for the operation. Options include:\n- `show_builtins` – show built-in properties in the response.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "enum": [
                  "show_builtins"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.Collection"
              }
            },
            "application/pvschema": {
              "schema": {
                "$ref": "#/components/schemas/models.Collection.pvschema"
              }
            }
          },
          "description": "Details of the collection including its properties.",
          "required": true,
          "x-originalParamName": "collection"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Collection"
                }
              },
              "application/pvschema": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/models.Collection.pvschema"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "description": "Reserved for future use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "error_code": "PV1004",
                  "message": "The collection is not found.",
                  "context": {}
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 3
      }
    },
    "/api/pvlt/1.0/data/collections/{collection}/objects": {
      "get": {
        "operationId": "get-objects",
        "summary": "List objects",
        "description": "Returns a [paginated list](/api/api-pagination) of objects from a collection with all or a subset of object property values.\n\nThe role performing this operation must have both of the following:\n- The `CapDataReader` capability.\n- At least one allowing policy and no denying policies for the `read` operation for each of the properties and the\n  collection requested in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n\n**Warning**: Use of the `unsafe` option, to include all object property values, may expose more private information than is required, use with caution.",
        "parameters": [
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "description": "A comma-separated list of object IDs. If not provided, all objects are returned. The number of IDs provided cannot exceed the default page size.",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Options for the operation. Options include:\n- `unsafe` – fetch all the properties, cannot be specified with `props`.\n- `show_builtins` – show built-in properties, can only be specified with `unsafe`.\n- `deleted` – get only deleted objects.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, `props=first_name,last_name`. If the `unsafe` option is used, must be empty.",
            "in": "query",
            "name": "props",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ObjectFieldsPage"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection, properties or object is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Objects"
        ],
        "x-docs-sidebar-precedence": 1
      },
      "post": {
        "operationId": "add-object",
        "summary": "Add object",
        "description": "Adds an object to a collection. The request must include all the non-nullable properties, as defined by the [collection schema](/api/operations/list-collection-properties).\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for each of the collection properties\n  provided in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.",
        "parameters": [
          {
            "description": "The name of the collection to add the object to.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          },
          {
            "description": "Object time to live (TTL) in seconds, cannot be set to 0. If not set, the default TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS` and `PVAULT_TTL_UNASSOCIATED_OBJECTS` time to live environment variables.",
            "in": "query",
            "name": "ttl",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]*$"
            }
          }
        ],
        "requestBody": {
          "x-has-pii": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.Object"
              }
            }
          },
          "description": "The object details.",
          "required": true,
          "x-originalParamName": "object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ObjectID"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection or properties is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Objects"
        ],
        "x-docs-sidebar-precedence": 4
      },
      "patch": {
        "operationId": "update-object-by-id",
        "summary": "Update object",
        "description": "Updates properties of an object in a collection.\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for each of the collection properties\n  specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n",
        "parameters": [
          {
            "description": "The name of the collection containing the object.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the object.",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "maxItems": 1,
              "minItems": 1
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          },
          {
            "description": "Object time to live (TTL) in seconds. If not set, the default TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS` and `PVAULT_TTL_UNASSOCIATED_OBJECTS` time to live environment variables.",
            "in": "query",
            "name": "ttl",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]*$"
            }
          },
          {
            "description": "Options for the operation. Options include:\n- `deleted` – update only deleted objects.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "x-has-pii": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.Object"
              }
            }
          },
          "description": "The object properties to update.",
          "required": true,
          "x-originalParamName": "object"
        },
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection, properties, or object is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Objects"
        ],
        "x-docs-sidebar-precedence": 5
      },
      "delete": {
        "operationId": "delete-object-by-id",
        "summary": "Delete object",
        "description": "Deletes an object from a collection. This operation is irreversible.\n\nThe role performing this operation must have both of the following:\n- The `CapDataWriter` capability.\n- At least one allowing policy and no denying policies for the `delete` operation for each of the properties defined for\n  the collection specified in the call.\n  \nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.",
        "parameters": [
          {
            "description": "The name of the collection containing the object.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the object.",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "minItems": 1,
              "maxLength": 1
            }
          },
          {
            "description": "Options for the operation. Options include:\n- `hard_delete` – permanently delete the objects.\n- `deleted` – remove only deleted objects, requires `hard_delete` to be specified.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection or object is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Objects"
        ],
        "x-docs-sidebar-precedence": 6
      }
    },
    "/api/pvlt/1.0/data/collections/{collection}/tokens": {
      "post": {
        "operationId": "tokenize",
        "summary": "Tokenize",
        "description": "Creates tokens that reference the values of objects' properties. The token ID is partially or wholly randomly-generated and, therefore, is not sensitive.\n\nThe returned token IDs are in the same order as the object IDs in the request. No tokens are created if any object IDs are invalid or not found.\n\nIf this operation is called for an object ID and properties that have a token:\n- Any token tags are appended to the existing token.\n- If time to live (TTL) is specified, then the token expiry is updated. If TTL is not specified, the token expiry is updated if the default settings result in an expiry date after the token's current expiry date.\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `tokenize` operation for each of the collection properties specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
        "parameters": [
          {
            "description": "Token time to live (TTL) in seconds. If not set, the default TTL is used. See the `PVAULT_TTL_TOKENS` time to live environment variable.",
            "in": "query",
            "name": "ttl",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]*$"
            }
          },
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.TokenizeRequest"
              }
            }
          },
          "description": "Details of the tokenization request.",
          "required": true,
          "x-originalParamName": "object_prop"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.TokenValue"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "objectid": "credit_cadr",
                  "error_code": "PV2003",
                  "message": "One or more property fields is invalid."
                }
              }
            },
            "description": "The collection, objects, or properties aren't found or are missing."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-docs-sidebar-precedence": 1
      },
      "get": {
        "operationId": "detokenize",
        "summary": "Detokenize tokens",
        "description": "Returns the object property values for tokens.\n\nThe tokens to detokenize are those matching all the criteria in the `token_id`, `object_id`,  and `tag` parameters. If the token query includes an invalid or not found token ID, the operation returns a 404 error. Otherwise, the operation returns an empty response if it finds no matches. See [search tokens](search-tokens) for more details.\n\nThe role performing this operation must have all of these:\n- The `CapTokensDetokenizer` capability.\n- Policies:\n  + At least one allowing policy and no denying policies for the `detokenize` operation for each of the collection properties that are tokenized by tokens specified in the query.\n  + At least one allowing policy and no denying policies for the `read` operation for each of the collection properties that are tokenized by tokens specified in the query.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
        "parameters": [
          {
            "description": "Comma-separated list of object IDs.",
            "in": "query",
            "name": "object_id",
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array"
            }
          },
          {
            "description": "Options for the operation. Options include:\n- `include_metadata` - show token metadata in the response.\n- `deleted` – detokenize deleted tokens.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "include_metadata",
                  "deleted"
                ]
              }
            }
          },
          {
            "description": "Comma-separated list of tags.",
            "in": "query",
            "name": "tag",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated list of token IDs.",
            "in": "query",
            "name": "token_id",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.DetokenizedToken"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "objectid": "b56dd6aa-35f0-11ed-a261-0242ac120002",
                  "error_code": "PV3087",
                  "message": "One or more token IDs not found."
                }
              }
            },
            "description": "The collection, reason, or tokens aren't found or are missing, `reason` is set to `other` but no `adhoc_reason` is provided, or no token query parameters are provided."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-docs-sidebar-precedence": 2
      },
      "delete": {
        "operationId": "delete-tokens",
        "summary": "Delete tokens",
        "description": "Deletes tokens.\n\nThe tokens to delete are those that match all the criteria in the `token_id`, `object_id`,  and `tag` parameters. If the token query finds no matches, the operation returns a 404 error. See [search tokens](search-tokens) for more details.\n\nDeleted tokens remain available to the [detokenize](detokenize), [update](update-tokens), and [search](search-tokens) operations, by using the ` delete ` option, until they are hard deleted with this operation or [purged](garbage-collection).\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `delete` operation for the `tokens` resource of the specified collection.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
        "parameters": [
          {
            "description": "Comma-separated list of object IDs.",
            "in": "query",
            "name": "object_id",
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated list of tags.",
            "in": "query",
            "name": "tag",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated list of token IDs.",
            "in": "query",
            "name": "token_id",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Options for the operation. Options include:\n- `hard_delete` – permanently delete the tokens.\n- `deleted` – remove only deleted tokens, requires `hard_delete` to be specified.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "error_code": "PV3009",
                  "message": "The token is not found."
                }
              }
            },
            "description": "The collection or reason aren't found or are missing, the `reason` is set to `other` but no `adhoc_reason` is provided, no token query parameters are provided, or the query finds no matching tokens."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-docs-sidebar-precedence": 3
      },
      "patch": {
        "operationId": "update-tokens",
        "summary": "Update tokens",
        "description": "Updates `tags` and `expiration` token metadata.\n\nThe tokens to update are those that match all the criteria in the `token_id`, `object_id`,  and `tag` parameters. If the token query finds no matches, the operation returns a 404 error. See [search tokens](search-tokens) for more details.\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for the `tokens` resource of the collection specified in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
        "parameters": [
          {
            "description": "Time to live (TTL) in seconds for the tokens. If not set, the expiry dates of the tokens are not changed.",
            "in": "query",
            "name": "ttl",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]*$"
            }
          },
          {
            "description": "Comma-separated list of object IDs.",
            "in": "query",
            "name": "object_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Comma-separated list of tags.",
            "in": "query",
            "name": "tag",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Comma-separated list of token IDs.",
            "in": "query",
            "name": "token_id",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Options for the operation. Options include:\n- `deleted` – update only deleted tokens.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.UpdateTokenRequest"
              }
            }
          },
          "description": "Update token request details.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "error_code": "PV3009",
                  "message": "The token is not found."
                }
              }
            },
            "description": "The collection or reason aren't found or are missing, the `reason` is set to `other` but no `adhoc_reason` is provided, no token query parameters are provided, or the query finds no matching tokens."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-docs-sidebar-precedence": 4
      }
    },
    "/api/pvlt/1.0/ctl/collections/{collection}": {
      "get": {
        "operationId": "get-collection",
        "summary": "Get collection",
        "description": "Gets a collection and its properties.\n\nThe collection details can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collection"
          },
          {
            "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
          },
          {
            "description": "Options for the operation. Options include:\n- `show_builtins` – show built-in properties in the response.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "enum": [
                  "show_builtins"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Collection"
                }
              },
              "application/pvschema": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/models.Collection.pvschema"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 2
      },
      "patch": {
        "operationId": "update-collection",
        "summary": "Update collection",
        "description": "Adds properties to a collection.\n\nThe collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting  the  `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.\n\nSee [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.\n\nThe collection name provided in the path parameter must match the collection name in the JSON or PVSchema.\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/collection"
          },
          {
            "$ref": "#/components/parameters/jsonOrPvSchemaFormat"
          },
          {
            "description": "Options for the operation. Options include:\n- `show_builtins` – show built-in properties in the response.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "enum": [
                  "show_builtins"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.Collection"
              }
            },
            "application/pvschema": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Details of the collection, including its properties.",
          "required": true,
          "x-originalParamName": "collectionChanges"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Collection"
                }
              },
              "application/pvschema": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 4
      },
      "delete": {
        "operationId": "delete-collection",
        "summary": "Delete collection",
        "description": "Deletes a collection.\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/collection"
          }
        ],
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 5
      }
    },
    "/api/pvlt/1.0/ctl/collections/{collection}/properties": {
      "get": {
        "operationId": "list-collection-properties",
        "summary": "List collection properties",
        "description": "Lists the properties of a collection.\n\nThe collection properties determines the properties shared by each object in the collection.\n\nThis operation return a JSON object. The information returned contains the properties\ndefined by the user and the built-in properties added by Vault when the collection was created.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "description": "The name of the collection containing the properties.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Options for the operation. Options include: \n- `show_builtins` – show built-in properties in the response.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "enum": [
                  "show_builtins"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.Property"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 2
      }
    },
    "/api/pvlt/1.0/data/collections/{collection}/properties/{property}": {
      "get": {
        "operationId": "get-objects-property",
        "summary": "Get objects property",
        "description": "Returns a [paginated list](/api/api-pagination) of the values of a property for objects in a collection.\n\nThe role performing this operation must have both of the following:\n- The `CapDataReader` capability.\n- At least one allowing policy and no denying policies for the `read` operation for the property and the and the\n  collection requested in the call.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.",
        "parameters": [
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The required property.",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Options for the operation. Options include:\n- `deleted` – get only deleted objects.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The ID of the object. If not given - return all objects",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ObjectFieldsPage"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection, properties or object is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Objects"
        ],
        "x-docs-sidebar-precedence": 2
      }
    },
    "/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}": {
      "post": {
        "operationId": "add-collection-property",
        "summary": "Add collection property",
        "description": "Adds a property to a collection.\n\nThe role performing this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "description": "The name of the collection to add the property to.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the property to add.",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.Property"
              }
            }
          },
          "description": "Details of the property.",
          "required": true,
          "x-originalParamName": "property"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Property"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 3
      },
      "get": {
        "operationId": "get-collection-property",
        "summary": "Get collection property",
        "description": "Gets a property of a collection.\n\nThe role that performs this operation must have the `CapCollectionsReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "description": "The ID of the collection containing the property.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the property.",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Property"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection or property wasn't found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 4
      },
      "patch": {
        "operationId": "update-collection-property",
        "summary": "Update collection property",
        "description": "** Not implemented **\n\nModifies the property of a collection. Properties in use on objects in the collection cannot be updated. Partial update is not supported, any property not included in the request is replaced with its default values.\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "description": "The name of the collection containing the property.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the property.",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.Property"
              }
            }
          },
          "description": "property info",
          "required": true,
          "x-originalParamName": "property"
        },
        "responses": {
          "200": {
            "description": "Property updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection or property wasn't found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 5
      },
      "delete": {
        "operationId": "delete-collection-property",
        "summary": "Delete collection property",
        "description": "Deletes a property from a collection.\n\nDeleting a property removes it also from existing objects in the collection. This operation is irreversible.\n\nThe role that performs this operation must have the `CapCollectionsWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "description": "The name of the collection containing the property.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the property.",
            "in": "path",
            "name": "property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection or property wasn't found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Collections"
        ],
        "x-docs-sidebar-precedence": 6
      }
    },
    "/api/pvlt/1.0/data/collections/{collection}/query/objects": {
      "post": {
        "operationId": "search-objects",
        "summary": "Search objects",
        "description": "Returns a [paginated list](/api/api-pagination) of objects, with property values, from a collection that satisfies a query.\n\nThe role performing this operation must have all the following:\n- The `CapDataSearcher` capability.\n- Policies:\n  + At least one allowing policy and no denying policies for the `read` operation for each of the collection properties\n    specified in the `props` query parameter.\n  + At least one allowing policy and no denying policies for the `search` operation for each of the collection\n    properties\n    specified in the `query` body parameter.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how\ncapabilities are used to control access to operations and policies are used to control access to data.\n\n**Warning**: Use of the `unsafe` option, to include all object property values, may expose more private information than is required, use with caution..",
        "parameters": [
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "description": "Options for the operation. Options include:\n- `unsafe` – fetch all the properties, cannot be specified with `props`.\n- `show_builtins` – show built-in properties, can only be specified with `unsafe`.\n- `deleted` – get only deleted objects.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, `props=first_name,last_name`. If the `unsafe` option is used, must be empty.",
            "in": "query",
            "name": "props",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "x-has-pii": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.Query"
              }
            }
          },
          "description": "The query.\nThis is a JSON object consisting of property keys and match values.\nFor example:\n```json\n{\n  \"match\": {\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\"\n  }\n}\n```\nis the equivalent to:\n```sql\nwhere first_name = \"John\" AND last_name=\"Doe\"\n```\n",
          "required": true,
          "x-originalParamName": "query"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ObjectFieldsPage"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The collection or properties is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Objects"
        ],
        "x-docs-sidebar-precedence": 3
      }
    },
    "/api/pvlt/1.0/data/collections/{collection}/rotate/tokens": {
      "post": {
        "operationId": "rotate-tokens",
        "summary": "Rotate tokens",
        "description": "Generates new token IDs for a list of tokens.\n\nThe role performing this operation must have both of these:\n- The `CapTokensWriter` capability.\n- At least one allowing policy and no denying policies for the `write` operation for the `tokens` resource of the specified collection.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n",
        "parameters": [
          {
            "description": "Comma-separated list of token IDs.",
            "in": "query",
            "name": "token_id",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.RotatedToken"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "token_ids": "d27923c6-5d16-41e3-89ee-118b05a25372",
                  "error_code": "PV3087",
                  "message": "One or more token IDs not found."
                }
              }
            },
            "description": "The collection, reason, or tokens aren't found or are missing or the `reason` is set to `other` but no `adhoc_reason` is provided."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-docs-sidebar-precedence": 5
      }
    },
    "/api/pvlt/1.0/data/collections/{collection}/query/tokens": {
      "post": {
        "operationId": "search-tokens",
        "summary": "Search tokens",
        "description": "Lists tokens with their metadata. \n\nIf the token query includes an invalid or not found token ID, the operation returns a 404 error. Otherwise, if no matches are found, the operation returns an empty response. \n\nThe role performing this operation must have all of these:\n- The `CapTokensReader` capability.\n- At least one allowing policy and no denying policies for the `read` operation for the `tokens` resource of the specified collection.\n\nSee [identity and access management](/data-security/identity-and-access-management) for more information about how capabilities are used to control access to operations and policies are used to control access to data.\n\n## Token query\n\nThe tokens returned by this operation are defined using 3 query parameters. All parameters are optional, but at least one must be provided:\n\n1. `token_id` - A list of token IDs. The operation will fail if any of the tokens don't exist, are soft deleted, or are expired.\n2. `object_id` - A list of object IDs.\n3. `tag` - A list of tags.\n\nThe returned tokens are those that match all of the criteria. \n\nExamples: \n* If only the `tag` parameter is specified, then the result is the tokens with the specified tags. \n* If only `token_id` is specified, then the result is the tokens with the requested token IDs. Because token IDs can be reused, multiple tokens can match even if only one token ID is specified. \n* If `token_id` and `object_id` are specified, then the result is the tokens with the requested token IDs that have tokenized values for the specified object IDs.",
        "parameters": [
          {
            "description": "Options for the operation. Options include:\n- `deleted` – get only deleted tokens.\n",
            "in": "query",
            "name": "options",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The name of the collection containing the objects.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "description": "The token query.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.QueryToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.TokenMetadata"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                },
                "example": {
                  "objectid": "b56dd6aa-35f0-11ed-a261-0242ac120002",
                  "error_code": "PV3087",
                  "message": "One or more token IDs not found."
                }
              }
            },
            "description": "The collection, reason, or tokens aren't found or are missing, `reason` is set to `other` but no `adhoc_reason` is provided, or no token query parameters are provided."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Tokens"
        ],
        "x-docs-sidebar-precedence": 6
      }
    },
    "/api/pvlt/1.0/ctl/transformations": {
      "get": {
        "operationId": "list-transformations",
        "summary": "List transformations",
        "description": "Lists the transformations in a collection. See Manage transformations for more information.\n\nThe role that performs this operation must have the `CapSchemaReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.TransformationDoc"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Data types and transformations"
        ],
        "x-docs-sidebar-precedence": 7
      }
    },
    "/api/pvlt/1.0/ctl/types": {
      "get": {
        "operationId": "list-property-types",
        "summary": "List property types",
        "description": "Lists the Vault property types.\n\nSee Data types for more information.\n\nThe role that performs this operation must have the `CapSchemaReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/piitype.PIIType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Data types and transformations"
        ],
        "x-docs-sidebar-precedence": 8
      }
    },
    "/api/pvlt/1.0/data/info/health": {
      "get": {
        "operationId": "data-health",
        "summary": "Get data service status",
        "description": "Gets the status of the service.\n\nThe status codes returned follow the IETF standard [Health Check Response Format for HTTP APIs](https://datatracker.ietf.org/doc/html/draft-inadarei-api-health-check-05). For example, `pass` is returned when the service is up.\n\nThe role performing this operation must have the `CapDataReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Health"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 8
      }
    },
    "/api/pvlt/1.0/ctl/info/health": {
      "get": {
        "operationId": "control-health",
        "summary": "Get control service status",
        "description": "Gets the status of the service.\n\nThe status codes returned follow the IETF standard [Health Check Response Format for HTTP APIs](https://datatracker.ietf.org/doc/html/draft-inadarei-api-health-check-05). For example, `pass` is returned when the service is up.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.Health"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 9
      }
    },
    "/api/pvlt/1.0/ctl/info/cluster": {
      "get": {
        "operationId": "get-cluster-info",
        "summary": "Get cluster information",
        "description": "Get Cluster Information.\n\nReturns the vault's generation and the generations of all the workers (data servers).\n\nThe role that performs this operation must have the `CapClusterInfoReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.AllGenerations"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 10
      }
    },
    "/api/pvlt/1.0/system/admin/lifecycle/gc": {
      "post": {
        "operationId": "garbage-collection",
        "summary": "Purge objects and tokens",
        "description": "Permanently deletes objects and tokens that have:\n- passed their time to live (TTL) end date and therefore expired\n- been deleted\nwhere the expiry or deletion date of an item is before the grace period.\n\nFor example, suppose the default 30-day grace period applies, and this operation is called on 1 October. In that case, items that expired or were deleted before 1 September are permanently deleted, and those that expired or were deleted after 1 September are unaffected.\n\nThe grace period is set with the `PVAULT_DB_GC_GRACE_PERIOD_DAYS` environment variable.\n\nA dry run can be performed to determine how many objects and tokens are available to delete permanently.\n",
        "parameters": [
          {
            "description": "Whether to delete objects, tokens, or both. Options are:\n- `objects_only` – delete only objects.\n- `tokens_only` – delete only tokens.\nIf not set, the default is both.\n",
            "in": "query",
            "name": "filter",
            "schema": {
              "enum": [
                "objects_only",
                "tokens_only"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether to respond with how many objects and tokens are available for permanent deletion without permanently deleting them.",
            "in": "query",
            "name": "dry_run",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/adhoc_reason"
          },
          {
            "$ref": "#/components/parameters/reason"
          },
          {
            "$ref": "#/components/parameters/reload_cache"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/gc.DeletionCount"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 10
      }
    },
    "/api/pvlt/1.0/system/debug/error/trigger": {
      "post": {
        "operationId": "trigger-error",
        "summary": "Trigger an artificial error",
        "description": "Manually trigger an artificial error for testing purposes.\n\nThe role that performs this operation must have the `CapErrorWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/500"
          },
          "403": {
            "$ref": "#/components/responses/500"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 10
      }
    },
    "/api/pvlt/1.0/system/info/configuration": {
      "get": {
        "operationId": "get-configuration",
        "summary": "Get system configuration",
        "description": "Get the current active system configuration.\n\nThe role that performs this operation must have the `CapInfoReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/toml": {
                "schema": {
                  "$ref": "#/components/schemas/config.Config"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 10
      }
    },
    "/api/pvlt/1.0/system/info/license": {
      "get": {
        "operationId": "get-license",
        "summary": "Get license",
        "description": "Gets information on the currently used license.\n\nThe role that performs this operation must have the `CapInfoReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.License"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 10
      }
    },
    "/api/pvlt/1.0/system/info/version": {
      "get": {
        "operationId": "get-vault-version",
        "summary": "Get Vault version",
        "description": "Gets the version of Vault.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ProductVersion"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ],
        "x-docs-sidebar-precedence": 10
      }
    },
    "/api/pvlt/1.0/ctl/iam/conf": {
      "get": {
        "operationId": "get-iam-conf",
        "summary": "Get IAM configuration",
        "description": "Gets the identity and access management (IAM) configuration in TOML format.\n\nThe role that performs this operation must have the `CapIAMReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/toml": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Config"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "IAM"
        ]
      },
      "post": {
        "operationId": "set-iam-conf",
        "summary": "Set IAM configuration",
        "description": "Sets the identity and access management (IAM) configuration.\n\nThe role that performs this operation must have the `CapIAMWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/toml": {
              "schema": {
                "$ref": "#/components/schemas/auth.Config"
              }
            }
          },
          "description": "IAM configuration in TOML format.",
          "required": true,
          "x-originalParamName": "auth_config"
        },
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/api/pvlt/1.0/ctl/iam/user/regen": {
      "post": {
        "operationId": "regenerate-user-api-key",
        "summary": "Regenerate user API key",
        "description": "Regenerates a user's API key. The existing API key is invalidated. This operation is irreversible.\n\nThe role that performs this operation must have the `CapIAMWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.UserName"
              }
            }
          },
          "description": "The name of the user to regenerate API key for.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.APIKey"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rest.HTTPError"
                }
              }
            },
            "description": "The user is not found."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "IAM"
        ]
      }
    },
    "/api/pvlt/1.0/system/admin/keys/rotate": {
      "post": {
        "operationId": "rotate-keys",
        "summary": "Rotate data encryption keys",
        "description": "Rotates all the KMS keys that Vault uses to encrypt properties, tokens, and more.\n\nWhen the keys are rotated, new data is encrypted with the new key. All old keys are retained, so that content encrypted with previous keys can be decipherable.\n\nThe role that performs this operation must have the `CapKMSWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ]
      }
    },
    "/api/pvlt/1.0/system/confvar": {
      "delete": {
        "operationId": "clear-all-conf-vars",
        "summary": "Clear configuration variables",
        "description": "Clears all dynamic configuration variables.\n\nThe role performing this operation must have the `CapConfvarWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Config Vars"
        ]
      }
    },
    "/api/pvlt/1.0/system/confvar/{name}": {
      "get": {
        "operationId": "get-conf-var",
        "summary": "Get configuration variable",
        "description": "Gets a dynamic configuration variable by name. The names of the variables that may be obtained are:\n\n- `log_level`\n\nThe role that performs this operation must have the `CapConfvarReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "description": "The name of the configuration variable.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ConfVar"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Config Vars"
        ]
      },
      "post": {
        "operationId": "set-conf-var",
        "summary": "Set configuration variable",
        "description": "Sets a dynamic configuration variable by name. The names of the variables that may be set are:\n\n- `log_level` which can take the values of `debug`, `info`, `warn`, and `error`.\n\nThe role that performs this operation must have the `CapConfvarWriter` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "parameters": [
          {
            "description": "The name of the configuration variable.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-has-pii": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.ConfVarValue"
              }
            }
          },
          "description": "Value of the configuration.",
          "required": true,
          "x-originalParamName": "value"
        },
        "responses": {
          "200": {
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Config Vars"
        ]
      }
    },
    "/api/pvlt/1.0/system/info/kms": {
      "get": {
        "operationId": "get-kms",
        "summary": "Get KMS status",
        "description": "Gets the status of the configured KMS.\n\nThe role that performs this operation must have the `CapKMSReader` capability.\nSee [Access control](/data-security/identity-and-access-management#access-control) for more information about how\ncapabilities are used to control access to operations.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.KMSStatus"
                }
              }
            },
            "description": "The request is successful."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "System"
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "jsonOrPvSchemaFormat": {
        "description": "The format of the response. Overrides any `Accept` header value provided.",
        "in": "query",
        "name": "format",
        "schema": {
          "type": "string",
          "enum": [
            "pvschema",
            "json"
          ],
          "default": "json"
        }
      },
      "collection": {
        "description": "The name of the collection.",
        "in": "path",
        "name": "collection",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
        },
        "example": "buyers"
      },
      "page_size": {
        "description": "The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`",
        "in": "query",
        "name": "page_size",
        "schema": {
          "type": "integer"
        }
      },
      "cursor": {
        "description": "The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the `id` is specified, paging is not supported. In this case, if the number of `id` values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST).",
        "in": "query",
        "name": "cursor",
        "schema": {
          "type": "string"
        }
      },
      "adhoc_reason": {
        "name": "adhoc_reason",
        "description": "An ad-hoc reason for accessing the Vault data.",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "reason": {
        "name": "reason",
        "description": "Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.",
        "in": "query",
        "required": true,
        "schema": {
          "enum": [
            "AppFunctionality",
            "Analytics",
            "Notifications",
            "Marketing",
            "ThirdPartyMarketing",
            "FraudPreventionSecurityAndCompliance",
            "AccountManagement",
            "Maintenance",
            "DataSubjectRequest",
            "Other"
          ],
          "type": "string"
        }
      },
      "reload_cache": {
        "name": "reload_cache",
        "description": "Reloads the cache before the action.",
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      }
    },
    "responses": {
      "400": {
        "description": "The request is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rest.HTTPError"
            },
            "example": {
              "error_code": "PV1001",
              "message": "The access reason is missing.",
              "context": {
                "reason": null
              }
            }
          }
        }
      },
      "401": {
        "description": "Authentication credentials are incorrect or missing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rest.HTTPError"
            },
            "example": {
              "error_code": "PV1005",
              "message": "The request is unauthorized.",
              "context": {}
            }
          }
        }
      },
      "403": {
        "description": "The caller doesn't have the required access rights.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rest.HTTPError"
            },
            "example": {
              "error_code": "PV1007",
              "message": "The operation is forbidden due to missing capabilities.",
              "context": {
                "username": "WebServer"
              }
            }
          }
        }
      },
      "404": {
        "description": "The requested resource is not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rest.HTTPError"
            },
            "example": {
              "error_code": "PV1004",
              "message": "The collection is not found.",
              "context": {}
            }
          }
        }
      },
      "500": {
        "description": "An error occurred on the server.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rest.HTTPError"
            },
            "example": {
              "error_code": "PV1000",
              "message": "Something went wrong",
              "context": {}
            }
          }
        }
      },
      "501": {
        "description": "Not implemented.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rest.HTTPError"
            },
            "example": {
              "error_code": "PV2001",
              "message": "This operation is not implemented.",
              "context": {}
            }
          }
        }
      },
      "503": {
        "description": "The service is unavailable.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/rest.HTTPError"
            },
            "example": {
              "error_code": "PV1009",
              "message": "The operation timed out on the server.",
              "context": {}
            }
          }
        }
      }
    },
    "schemas": {
      "models.ObjectID": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "_id"
        ]
      },
      "models.UserName": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "auth.Config": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "policies": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/auth.Policy"
            }
          },
          "roles": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/auth.Role"
            }
          },
          "users": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/auth.User"
            }
          }
        },
        "required": [
          "policies",
          "roles",
          "users"
        ]
      },
      "auth.Policy": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyType": {
            "type": "string"
          },
          "reasons": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "operations",
          "policyType",
          "reasons",
          "resources"
        ]
      },
      "auth.Role": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "capabilities",
          "policies"
        ]
      },
      "auth.User": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "disabled",
          "role"
        ]
      },
      "config.Config": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "db": {
            "$ref": "#/components/schemas/config.DB"
          },
          "devmode": {
            "type": "boolean"
          },
          "features": {
            "$ref": "#/components/schemas/config.Features"
          },
          "kms": {
            "$ref": "#/components/schemas/config.KMS"
          },
          "log": {
            "$ref": "#/components/schemas/config.Log"
          },
          "sentry": {
            "$ref": "#/components/schemas/config.Sentry"
          },
          "service": {
            "$ref": "#/components/schemas/config.Service"
          },
          "tls": {
            "$ref": "#/components/schemas/config.TLS"
          },
          "ttl": {
            "$ref": "#/components/schemas/config.TTL"
          }
        },
        "required": [
          "db",
          "devmode",
          "features",
          "kms",
          "log",
          "sentry",
          "service",
          "tls",
          "ttl"
        ]
      },
      "config.DB": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "conn_max_lifetime_minutes": {
            "type": "integer"
          },
          "gc": {
            "$ref": "#/components/schemas/config.GC"
          },
          "hostname": {
            "type": "string"
          },
          "max_idle_conns": {
            "type": "integer"
          },
          "max_open_conns": {
            "type": "integer"
          },
          "max_string_length": {
            "type": "integer"
          },
          "migration": {
            "$ref": "#/components/schemas/config.Migration"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "require_tls": {
            "type": "boolean"
          },
          "user": {
            "type": "string"
          }
        },
        "required": [
          "conn_max_lifetime_minutes",
          "gc",
          "hostname",
          "max_idle_conns",
          "max_open_conns",
          "migration",
          "name",
          "password",
          "port",
          "require_tls",
          "user"
        ]
      },
      "config.Features": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "api_key_hashing": {
            "type": "boolean"
          },
          "encryption": {
            "type": "boolean"
          },
          "policy_enforcement": {
            "type": "boolean"
          },
          "mask_license": {
            "type": "boolean"
          }
        },
        "required": [
          "api_key_hashing",
          "encryption",
          "policy_enforcement",
          "mask_license"
        ]
      },
      "config.GC": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "batch_size": {
            "type": "integer"
          },
          "grace_period_days": {
            "type": "integer"
          }
        },
        "required": [
          "batch_size",
          "grace_period_days"
        ]
      },
      "config.KMS": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cache_enable": {
            "type": "boolean"
          },
          "seed": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "cache_enable",
          "seed",
          "uri"
        ]
      },
      "config.Log": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "customer_env": {
            "type": "string"
          },
          "customer_identifier": {
            "type": "string"
          },
          "datadog_apm_enable": {
            "type": "boolean"
          },
          "datadog_enable": {
            "type": "boolean"
          },
          "datadog_env": {
            "type": "string"
          },
          "level": {
            "type": "string"
          }
        },
        "required": [
          "customer_env",
          "customer_identifier",
          "datadog_apm_enable",
          "datadog_enable",
          "datadog_env",
          "level"
        ]
      },
      "config.Migration": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "auto_run": {
            "type": "boolean"
          },
          "enable_retries": {
            "type": "boolean"
          },
          "initial_wait_between_retries": {
            "type": "integer"
          },
          "max_retries": {
            "type": "integer"
          },
          "max_wait_between_retries": {
            "type": "integer"
          }
        },
        "required": [
          "auto_run",
          "enable_retries",
          "initial_wait_between_retries",
          "max_retries",
          "max_wait_between_retries"
        ]
      },
      "config.Sentry": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "enable": {
            "type": "boolean"
          }
        },
        "required": [
          "enable"
        ]
      },
      "config.Service": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "admin_api_key": {
            "type": "string"
          },
          "admin_may_read_data": {
            "type": "boolean"
          },
          "default_page_size": {
            "type": "integer"
          },
          "force_access_reason": {
            "type": "boolean"
          },
          "listen_addr": {
            "type": "string"
          },
          "max_page_size": {
            "type": "integer"
          },
          "timeout_seconds": {
            "type": "number"
          },
          "cache_refresh_interval_seconds": {
            "type": "integer"
          },
          "license": {
            "type": "string"
          }
        },
        "required": [
          "admin_api_key",
          "admin_may_read_data",
          "default_page_size",
          "force_access_reason",
          "listen_addr",
          "max_page_size",
          "timeout_seconds",
          "cache_refresh_interval_seconds",
          "license"
        ]
      },
      "config.TLS": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cert_file": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "key_file": {
            "type": "string"
          },
          "selfsigned": {
            "type": "boolean"
          }
        },
        "required": [
          "cert_file",
          "enable",
          "key_file",
          "selfsigned"
        ]
      },
      "config.TTL": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "associated_objects": {
            "type": "integer"
          },
          "tokens": {
            "type": "integer"
          },
          "unassociated_objects": {
            "type": "integer"
          }
        },
        "required": [
          "associated_objects",
          "tokens",
          "unassociated_objects"
        ]
      },
      "gc.DeletionCount": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "collection_name": {
            "type": "string",
            "description": "The name of the collection containing the objects or tokens to delete.",
            "example": "Tokens"
          },
          "collection_type": {
            "type": "string",
            "description": "The type of the collection.",
            "example": "TOKENS",
            "enum": [
              "DATA",
              "PERSONS",
              "TOKENS"
            ]
          },
          "count": {
            "type": "integer",
            "description": "The number of items permanently deleted.",
            "example": "634"
          }
        },
        "required": [
          "collection_name",
          "collection_type",
          "count"
        ]
      },
      "models.Collection": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "creation_time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The time when the collection was created, in RFC3339 format.",
            "example": "2022-07-05T08:47:12.047Z"
          },
          "modification_time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The time when the collection was last modified, in RFC3339 format.",
            "example": "2022-07-05T08:47:12.047Z"
          },
          "name": {
            "type": "string",
            "description": "The name of the collection.",
            "example": "buyers"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/models.Property"
            }
          },
          "type": {
            "type": "string",
            "description": "The schema prototype the collection is based on.",
            "enum": [
              "PERSONS",
              "DATA"
            ],
            "example": "PERSONS"
          }
        },
        "required": [
          "name",
          "properties",
          "type"
        ]
      },
      "models.Collection.pvschema": {
        "type": "string",
        "additionalProperties": false,
        "example": "buyers PERSONS (\n  buyer_name STRING ENCRYPTED COMMENT 'The name of the buyer.'\n);"
      },
      "models.ConfVar": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The name of the configuration variable.",
            "example": "log_level",
            "type": "string"
          },
          "value": {
            "description": "The value of the configuration variable."
          },
          "default_value": {
            "description": "The default value of the configuration variable."
          }
        },
        "required": [
          "name",
          "value",
          "default_value"
        ]
      },
      "models.License": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "description": "The full license activation key.",
            "type": "string"
          },
          "expiration": {
            "description": "The expiration date of the token in an RFC3339 format.",
            "example": "2022-07-05T08:47:12.047Z",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "key",
          "expiration"
        ]
      },
      "models.ConfVarValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "value": {
            "description": "The value of the configuration variable."
          }
        },
        "required": [
          "value"
        ]
      },
      "models.ConfigurationDoc": {
        "description": "Additional information about the transformation, as key-value pairs.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "non_masked_length": {
            "description": "Example transformation control key, in this case controlling the number of characters not masked in a data type.",
            "example": 4,
            "type": "integer"
          }
        },
        "required": [
          "non_masked_length"
        ]
      },
      "models.DetokenizedToken": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fields": {
            "description": "The detokenized property values.",
            "$ref": "#/components/schemas/models.ObjectFields"
          },
          "token_id": {
            "description": "The token ID.",
            "type": "string",
            "example": "49303e72-35e3-11ed-a261-0242ac120002"
          },
          "metadata": {
            "$ref": "#/components/schemas/models.TokenMetadata"
          }
        },
        "required": [
          "fields",
          "token_id"
        ]
      },
      "models.Health": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "The status of the service.",
            "example": "pass",
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "models.KMSStatus": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The type of the configured KMS",
            "example": "AWS",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "models.Object": {
        "type": "object",
        "additionalProperties": true,
        "example": {
          "date_of_birth": "1993-02-22",
          "email": "patfar@example.com",
          "first_name": "Pat",
          "foreign_id": "ff5ced0b-0788-4cfa-8235-76e6098f11cb",
          "gender": "Female",
          "last_name": "Far",
          "other_emails": [
            "pf@example.com",
            "pfar@example.com"
          ],
          "other_phone_numbers": [
            120220202020,
            130330303030
          ],
          "phone_number": 110110101010,
          "tenant_id": "6168d7c6-ee0d-4b63-8efb-24a8ca361fb4",
          "zip_code_us": 10101
        },
        "properties": {
          "_id": {
            "description": "The ID of the object.",
            "example": "b86718a3-f4a7-4e40-bb59-681f22b62649",
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "models.ObjectFields": {
        "type": "object",
        "example": {
          "credit_card_no": 1234432112344321
        },
        "additionalProperties": true
      },
      "models.ObjectFieldsPage": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "results": {
            "description": "The page objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/models.ObjectFields"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/models.Paging"
          }
        },
        "required": [
          "results",
          "paging"
        ]
      },
      "models.Paging": {
        "description": "Pagination information.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "size": {
            "type": "integer",
            "description": "Number of results in the current page."
          },
          "remaining_count": {
            "type": "integer",
            "description": "The remaining number of objects that can be read in ensuing calls to this method."
          },
          "cursor": {
            "type": "string",
            "description": "An opaque string you should provide to get the next page."
          }
        },
        "required": [
          "size",
          "remaining_count",
          "cursor"
        ]
      },
      "models.ProductVersion": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "db_schema_version": {
            "type": "integer"
          },
          "vault_id": {
            "example": "1525298622245191836",
            "type": "string"
          },
          "vault_version": {
            "description": "The version of a Vault specified as a string consisting of version number, build number, and edition.",
            "example": "0.9.5.1-g2be0eb7e",
            "type": "string"
          }
        },
        "required": [
          "db_schema_version",
          "vault_id",
          "vault_version"
        ]
      },
      "models.Property": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "creation_time": {
            "description": "The time when the property was created, in RFC3339 format.",
            "example": "2022-07-05T08:47:12.047Z",
            "readOnly": true,
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "The description of the property. If not provided, is set to an empty `string`.",
            "example": "The name of the buyer.",
            "type": "string"
          },
          "is_builtin": {
            "default": false,
            "description": "Whether the property is created by Vault (or by the user).",
            "example": false,
            "type": "boolean",
            "readOnly": true
          },
          "is_encrypted": {
            "default": true,
            "description": "Whether the value is stored encrypted.",
            "example": true,
            "type": "boolean"
          },
          "is_index": {
            "default": false,
            "description": "Whether the backend storage is optimized for searches on this property.",
            "example": false,
            "type": "boolean"
          },
          "is_nullable": {
            "default": false,
            "description": "Whether the value of the property can be removed (set to null).",
            "example": false,
            "type": "boolean"
          },
          "is_readonly": {
            "default": false,
            "description": "Whether the user can modify values of this property. Ignored for user define properties.",
            "example": false,
            "type": "boolean",
            "readOnly": true
          },
          "is_unique": {
            "default": false,
            "description": "Whether the backend storage enforces unique values.",
            "example": false,
            "type": "boolean"
          },
          "modification_time": {
            "description": "The time when the property was last modified, in RFC3339 format.",
            "example": "2022-07-05T08:47:12.047Z",
            "readOnly": true,
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "The name of the property. This is the name of the column in the data_{collection_name} table. Must be unique.",
            "example": "buyer_name",
            "type": "string"
          },
          "pii_type_name": {
            "description": "The name of the data type of the property.",
            "example": "STRING",
            "type": "string"
          }
        },
        "required": [
          "name",
          "pii_type_name"
        ]
      },
      "models.Query": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "match": {
            "$ref": "#/components/schemas/models.QueryMap"
          }
        },
        "required": [
          "match"
        ]
      },
      "models.QueryMap": {
        "type": "object",
        "additionalProperties": true
      },
      "models.QueryToken": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "object_id": {
            "description": "Comma-separated list of object IDs.",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "463a83d0-a816-4902-abba-2486e0c0a0bb"
            },
            "type": "array"
          },
          "token_id": {
            "description": "Comma-separated list of token IDs.",
            "items": {
              "type": "string",
              "example": "49303e72-35e3-11ed-a261-0242ac120002"
            },
            "type": "array"
          },
          "tag": {
            "description": "Comma-separated list of tags.",
            "items": {
              "type": "string",
              "example": "credit_cards"
            },
            "type": "array"
          }
        }
      },
      "models.RotatedToken": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "new_token_id": {
            "type": "string",
            "description": "The ID of the token.",
            "example": "49303e72-35e3-11ed-a261-0242ac120002"
          },
          "old_token_id": {
            "description": "The ID of the token before rotation.",
            "example": "de15a638-354a-11ed-a261-0242ac120002",
            "type": "string"
          }
        },
        "required": [
          "new_token_id",
          "old_token_id"
        ]
      },
      "models.TokenAggregatedMetadata": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "max_effective_expiration_time": {
            "description": "Latest expiry of all tokens with the token ID (UTC).",
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        }
      },
      "models.TokenMetadata": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "agg": {
            "$ref": "#/components/schemas/models.TokenAggregatedMetadata"
          },
          "reusable_token_id": {
            "description": "Whether the token ID can be reused.",
            "type": "boolean"
          },
          "reversible": {
            "description": "Whether the tokens are reversible.",
            "type": "boolean"
          },
          "scope": {
            "description": "The scope of the tokens.",
            "type": "string",
            "example": "default"
          },
          "token_id": {
            "description": "The shared ID of the tokens.",
            "type": "string",
            "example": "49303e72-35e3-11ed-a261-0242ac120002"
          },
          "tokens": {
            "description": "The metadata for each token.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/models.TokenRefMetadata"
            }
          }
        },
        "required": [
          "agg",
          "reusable_token_id",
          "reversible",
          "scope",
          "token_id",
          "tokens"
        ]
      },
      "models.TokenRefMetadata": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "creation_time": {
            "description": "Creation time of the token (UTC).",
            "type": "string",
            "format": "date-time"
          },
          "effective_expiration_time": {
            "description": "Effective expiry time of the token (UTC), being the earliest of the expiry time of the token or the object owning the token, if any.",
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "expiration_time": {
            "description": "Expiry time of the token (UTC).",
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "object_id": {
            "description": "The object this token is for.",
            "type": "string",
            "format": "uuid"
          },
          "tags": {
            "description": "Tags attached to the token.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "credit_cards"
            }
          }
        },
        "required": [
          "creation_time",
          "effective_expiration_time",
          "expiration_time",
          "object_id",
          "tags"
        ]
      },
      "models.TokenValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token_id": {
            "description": "The ID of the token.",
            "type": "string",
            "example": "de15a638-354a-11ed-a261-0242ac120002"
          }
        },
        "required": [
          "token_id"
        ]
      },
      "models.TokenizeRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fpprops": {
            "description": "Properties used by the format preserving template for the ID generation. The templates require these properties:\n- the `primary_account_number` template requires a property of type `CC_NUMBER`. The token ID is generated from this property by retaining the first six and last four digits and randomizing the remaining digits.\n",
            "items": {
              "type": "string",
              "example": "credit_card_no"
            },
            "type": "array"
          },
          "fptemplate": {
            "description": "The template used to format the generated ID. Supports: \n- `primary_account_number` that generates an ID that is a valid 16-digit PAN (credit card number).\nIf empty, the format of the ID is a UUID.\n",
            "enum": [
              "primary_account_number"
            ],
            "type": "string"
          },
          "object_ids": {
            "description": "A list of object IDs to create tokens for.",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "props": {
            "description": "A list of the properties to tokenize.",
            "items": {
              "type": "string",
              "example": "credit_card_no"
            },
            "type": "array"
          },
          "reuse_token_id": {
            "default": false,
            "description": "Whether to reuse token IDs. \n- If the combination of object ID, property values, and scope are not represented in a token whose ID can be reused, creates a new token and indicates that its ID can be reused.\n- If the combination of object ID, property values, and scope are represented in a token whose ID can be reused, returns the reusable token's ID. \nApplies only to `VALUE` tokens.\n",
            "type": "boolean"
          },
          "reversible": {
            "default": true,
            "description": "Whether the tokens can be detokenized.",
            "type": "boolean"
          },
          "scope": {
            "default": "default",
            "description": "A classification for the tokens.",
            "type": "string"
          },
          "tags": {
            "description": "Tags to attach to the tokens. Maximum 10.",
            "items": {
              "type": "string",
              "example": "credit_cards"
            },
            "type": "array",
            "maximum": 10
          },
          "type": {
            "description": "The type of tokens to create:\n- `VALUE` for tokens that represent the property values as they were when the token was created.\n- `POINTER` for tokens that represent the property values as they are when the request to detokenize is made.\n",
            "enum": [
              "POINTER",
              "VALUE"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "props",
          "type"
        ]
      },
      "models.TransformationDoc": {
        "description": "Details of a transformation that can be performed on a PII data type within a collection. Note: `pii_type_id` and `name` together are also a unique identifier of a transformation in a collection.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/models.ConfigurationDoc"
          },
          "name": {
            "description": "The name of the transformation.",
            "example": "mask",
            "type": "string"
          },
          "pii_type_name": {
            "description": "The name of the PII type.",
            "example": "email",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "configuration",
          "name",
          "pii_type_name"
        ]
      },
      "models.UpdateTokenRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tags": {
            "description": "Replacement tags for the tokens.",
            "items": {
              "type": "string",
              "example": "credit_cards"
            },
            "type": "array"
          }
        },
        "required": [
          "tags"
        ]
      },
      "piitype.PIIType": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "The description of the PII type.",
            "example": "a string of up to 450 characters",
            "type": "string"
          },
          "name": {
            "description": "The name of the PII type.",
            "example": "STRING",
            "type": "string"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "models.AllGenerations": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "vault": {
            "$ref": "#/components/schemas/models.VaultGeneration"
          },
          "workers": {
            "description": "Workers generations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/models.Worker"
            }
          }
        },
        "required": [
          "vault",
          "workers"
        ]
      },
      "models.VaultGeneration": {
        "description": "Vault Generation.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "generation_number": {
            "description": "Generation number.",
            "type": "integer"
          },
          "modified_at": {
            "description": "Modified at.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "generation_number",
          "modified_at"
        ]
      },
      "models.Worker": {
        "description": "Worker.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "worker_id": {
            "description": "Worker id.",
            "type": "integer"
          },
          "generation_number": {
            "description": "Generation number.",
            "type": "integer"
          },
          "generation_checked_at": {
            "description": "Modified at.",
            "type": "string",
            "format": "date-time"
          },
          "refresh_interval_seconds": {
            "description": "Refresh interval in seconds.",
            "type": "integer"
          }
        },
        "required": [
          "worker_id",
          "generation_number",
          "generation_checked_at",
          "refresh_interval_seconds"
        ]
      },
      "models.APIKey": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "api_key": {
            "description": "The new API key generated for the user.",
            "example": "some_user",
            "type": "string"
          },
          "api_key_expiry": {
            "description": "The expiry time of the API key.",
            "example": "2022-07-05T08:47:12.047Z",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "api_key",
          "api_key_expiry"
        ]
      },
      "rest.HTTPError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "context": {
            "description": "The error context.",
            "example": {
              "objectid": "b56dd6aa-35f0-11ed-a261-0242ac120002"
            },
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "error_code": {
            "description": "The error code.",
            "example": "PVxxxx",
            "type": "string"
          },
          "message": {
            "description": "The error message.",
            "example": "The object is not found.",
            "type": "string"
          }
        },
        "required": [
          "context",
          "error_code",
          "message"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http",
        "description": "---\nsidebar_position: 2\nsidebar_label: Authentication\n---\n\n# Authenticate with a Bearer authorization header\n\nThe Piiano Vault REST API uses API keys to authenticate and authorize requests. It accepts Bearer tokens in the HTTP `Authorization` header using the `Bearer <api-key>` scheme.\n\nTo obtain an API key, use the regenerate user API key [REST API operation](/api/operations/regenerate-user-api-key) or [CLI command](/cli/reference#regenerate-user-api-key).\n\nSee [Manage users and policies](/guides/manage-users-and-policies) to learn more about how Vault controls access to operations and data.\n"
      }
    }
  }
}